KNN (K Nearest Neighbor)

> data(iris)
> str(iris)
'data.frame':   150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...

problem or predict would be to predict Species depends on Sepal and Petals.
Species would be our target and other are features.


> table(iris$Species)

    setosa versicolor  virginica 
        50         50         50 


> head(iris)

> set.seed(9850) // for generate random number by computer.

> runif(5) // Generate 5 random number.
[1] 0.7495759 0.9970860 0.6520020 0.4329283 0.3323124

> nrow(iris) // how many row in iris datset
[1] 150

 > gp <- runif(nrow(iris)) // Generate 150 random numbers.

> head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species  // Very much sorted. 
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> head(iris,10)

Let us generate random dataset.
> iris <- iris[order(gp),]

> head(iris)
   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
98          6.2         2.9          4.3         1.3 versicolor
15          5.8         4.0          1.2         0.2     setosa
58          4.9         2.4          3.3         1.0 versicolor
12          4.8         3.4          1.6         0.2     setosa
78          6.7         3.0          5.0         1.7 versicolor
48          4.6         3.2          1.4         0.2     setosa


> summary(iris)
 Sepal.Length    Sepal.Width     Petal.Length    Petal.Width          Species  
 Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100   setosa    :50  
 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300   versicolor:50  
 Median :5.800   Median :3.000   Median :4.350   Median :1.300   virginica :50  

> summary(iris[,c(1,2,3,4)]) // without Species

> normalize <- function(x) {
+ return ( (x -min(x)) / (max(x) - min(x)))}
> normalize(c(1,2,3,4,5))
[1] 0.00 0.25 0.50 0.75 1.00
> normalize(c(10,20,30,40,50))
[1] 0.00 0.25 0.50 0.75 1.00

> iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)], normalize))
> summary(iris_n)
  Sepal.Length     Sepal.Width      Petal.Length     Petal.Width          // All number with 0 to 1 for easy calculation.
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.00000  
 1st Qu.:0.2222   1st Qu.:0.3333   1st Qu.:0.1017   1st Qu.:0.08333  
 Median :0.4167   Median :0.4167   Median :0.5678   Median :0.50000  


> iris_train <- iris_n[1:129,]
> iris_test <- iris_n[130:150,]
> iris_train_target <- iris[1:129,5]
> iris_test_target <- iris[130:150,5]
> require(class) // For classification algo.
Loading required package: class
> knn
The knn () function needs to be used to train a model for which we need to install a package â€˜classâ€™. 


> k = sqrt(nrow(iris)) // sqrt of total number of observation.
> k
[1] 12.24745

>  m2 <- knn(train=iris_train, test=iris_test, cl = iris_train_target, k=13)

> m2
 [1] versicolor setosa     versicolor versicolor virginica  setosa     versicolor versicolo)
r virginica  setosa     setosa     versicolor
[13] setosa     virginica  virginica  virginica  setosa     virginica  virginica  versicolor virginica 
Levels: setosa versicolor virginica

We got 21 prediction of test feature data.

> table(iris_test_target,m2)
                m2
iris_test_target setosa versicolor virginica
      setosa          6          0         0
      versicolor      0          7         0
      virginica       0          0         8
> 

Here correctly predicted perfectly.

